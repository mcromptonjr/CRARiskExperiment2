package edu.ucdavis.cs.cra;
import java.util.ArrayList;
import java.util.Scanner;

import edu.ucdavis.cs.cra.malware.CpuMalware;
import edu.ucdavis.cs.cra.malware.DiskMalware;
import edu.ucdavis.cs.cra.malware.Malware;
import edu.ucdavis.cs.cra.malware.NetMalware;
import edu.ucdavis.cs.cra.malware.RamMalware;


/**
 * Main driver for handling the execution of malware on target nodes.
 * 
 * @author Mac Crompton
 *
 */
public class MalwareMain {

	public static void main(String[] args) throws InterruptedException, NoSuchFieldException, SecurityException {
		/********************* Get ProcessID *****************************
		try {
			java.lang.management.RuntimeMXBean runtime = 
					java.lang.management.ManagementFactory.getRuntimeMXBean();
			java.lang.reflect.Field jvm = runtime.getClass().getDeclaredField("jvm");
			jvm.setAccessible(true);
			sun.management.VMManagement mgmt =  
					(sun.management.VMManagement) jvm.get(runtime);
			java.lang.reflect.Method pid_method =  
					mgmt.getClass().getDeclaredMethod("getProcessId");
			pid_method.setAccessible(true);

			int pid = (Integer) pid_method.invoke(mgmt);
			System.out.println(pid);
		} catch(Exception e) {
			e.printStackTrace();
		}
		 */

		// Open up an input stream to the control code which spawned this process.
		Scanner input = new Scanner(System.in);
		String command = input.nextLine();
		String[] params = command.split(" ");

		// This process must have atleast 3 parameters (malware malware_name percent)
		if(params.length < 3) {
			System.err.println("Malware Command does not have enough parameters");
			System.exit(-1);
		}

		// Get the percent as a value between 0 and 1 from the third parameter
		double percent = Double.parseDouble(params[2])/100;

		// Keep track of all the threads we are spawning, and the corresponding malware.
		ArrayList<Thread> threads = new ArrayList<Thread>();
		ArrayList<Malware> malware = new ArrayList<Malware>();

		if(params[1].equals("ram")) {
			// Start the RAM malware with the specified percentage
			Malware m = new RamMalware(percent);
			Thread t = new Thread(m);
			t.start();
			threads.add(t);
			malware.add(m);
		} else if(params[1].equals("cpu")) {
			// Start the CPU malware with the specified percentage
			// Assumes there are 4 cores.
			int numCores = 4;	// Should probably be a param
			for(int i = 0; i < numCores; i++) {
				// CPU malware is spawned for each core available
				Malware m = new CpuMalware(percent);
				Thread t = new Thread(m);
				t.start();
				threads.add(t);
				malware.add(m);
			}
		} else if(params[1].equals("disk")) {
			// Start the Disk malware with the specified percentage
			Malware m = new DiskMalware(percent);
			Thread t = new Thread(m);
			t.start();
			threads.add(t);
			malware.add(m);
		} else if(params[1].equals("plr")) {
			// Start the Network packet drop malware with the specified percentage
			Malware m = new NetMalware(percent);
			Thread t = new Thread(m);
			t.start();				//  sudo tc qdisc change dev eth2 root netem loss 10%
			threads.add(t);
			malware.add(m);
		} else {
			// This is not a recognized command
			System.err.println("Command parameter: '" + params[1] + "' unknown. Shutting down malware process.");
			System.exit(-1);
		}

		// Wait until we've received the command to stop
		String stop = input.nextLine();
		System.out.println("Received command to stop: " + stop);
		for(Malware m : malware) {
			// Alert all malware threads to stop what they are doing
			m.stop = true;
		}
		
		// Wait for each thread to rejoin the main thread
		System.out.println("Waiting for threads to rejoin...");
		for(Thread t : threads) {
			t.join();
		}

		// Close the input stream
		input.close();
	}
}
