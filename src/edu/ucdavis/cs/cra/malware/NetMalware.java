package edu.ucdavis.cs.cra.malware;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Drop a specified percentage of packets which enter and exit this node.
 * 
 * @author Mac Crompton
 *
 */
public class NetMalware extends Malware {
	/**
	 * Constructs a piece of malware to affect the packet drop rate by a certain percentage
	 * 
	 * @param percent The percent to affect packet drop rate by
	 */
	public NetMalware(double percent) {
		super(percent);
	}

	public void run() {
		
		try {
			// Access all of the interface devices on this machine
			String[] cmd = { "ifconfig" };
			ProcessBuilder pb = new ProcessBuilder(cmd);
			pb.redirectErrorStream(true);
			Process process = pb.start();
			Scanner input = new Scanner(process.getInputStream());
			String curInterface = "";
			// Filter by lines which contain this string
			String search = "inet addr:";
			ArrayList<String> addrs = new ArrayList<String>();
			while(input.hasNextLine()) {
				String line = input.nextLine();
				String[] param = line.split(" +");
				if(param[0].length() != 0) {
					// Keep track of the current interface device name
					curInterface = param[0];
				} else if(line.contains(search)) {
					// The subsequent line after getting the interface name, should contain the associated address
					int index = line.indexOf(search);
					int end = line.indexOf(".", index);
					String addr = line.substring(index + search.length(), end);
					// Only add addresses in the 10.x.x.x range
					if(addr.equals("10")) {
						addrs.add(curInterface);
						curInterface = "";
					}
				}
			}
			for(String s : addrs) {
				System.out.println(s);
			}
			
			// Clear all traffic control settings for each of our interface devices
			for(String dev : addrs) {
				String[] cmdA = { "sudo", "tc", "qdisc", "del", "dev", dev, "root" };
				ProcessBuilder pbA = new ProcessBuilder(cmdA);
				pbA.redirectErrorStream(true);
				Process processA = pbA.start();
				Scanner output = new Scanner(processA.getInputStream());
				while(output.hasNextLine()) {output.nextLine();}
				output.close();
			}
			// Set the packet loss rate percentage and reenable the delay setting
			for(String dev : addrs) {
				String[] cmdC = { "sudo", "tc", "qdisc", "add", "dev", dev, "root", "netem", "loss", (1-Math.sqrt(1-percent))*100 + "%", "delay", "50.0ms" };
				System.out.println((1-Math.sqrt(1-percent))*100);
				ProcessBuilder pbC = new ProcessBuilder(cmdC);
				pbC.redirectErrorStream(true);
				Process processC = pbC.start();
				Scanner output = new Scanner(processC.getInputStream());
				while(output.hasNextLine()) {System.out.println(output.nextLine());}
				output.close();
			}
			
			// Keep this up without busy waiting until we need to stop
			while(!stop) {
				Thread.sleep(100);
			}
			
			// Reset our traffic control settings back to their original values
			for(String dev : addrs) {
				String[] cmdC = { "sudo", "tc", "qdisc", "change", "dev", dev, "root", "netem", "loss", "0%", "delay", "50.0ms" };
				ProcessBuilder pbC = new ProcessBuilder(cmdC);
				pbC.redirectErrorStream(true);
				Process processC = pbC.start();
				Scanner output = new Scanner(processC.getInputStream());
				while(output.hasNextLine()) {output.nextLine();}
				output.close();
			}
			input.close();
			
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
	}
}
