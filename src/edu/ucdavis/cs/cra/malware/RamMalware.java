package edu.ucdavis.cs.cra.malware;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.Vector;

/**
 * Utilizes and keeps alive a certain percentage of RAM.
 * 
 * @author Mac Crompton
 *
 */
public class RamMalware extends Malware {
	/**
	 * Constructs a piece of malware which utilizes a specified percentage of RAM
	 * 
	 * @param percent The percentage of ram to utilize
	 */
	public RamMalware(double percent) {
		super(percent);
	}
	
	public void run() {
		/***************** Get Process Memory from Proc MemInfo ***************
		int freeMemory = 1;
		try {
			String memFreeStr = Sys.executeCommand("cat /proc/meminfo | grep MemFree");
			System.out.println("Java Free Memory: " + Runtime.getRuntime().maxMemory());
			System.out.println(memFreeStr);
			Pattern p = Pattern.compile("([0-9]+)");
			Matcher m = p.matcher(memFreeStr);
			if(m.find()) {
				freeMemory = Integer.parseInt(m.group());
				int kbKeep = 200*1024;
				if(freeMemory > kbKeep) {
					freeMemory -= kbKeep;
				}
			}
			System.out.println("Got here");
		} catch (IOException | InterruptedException e) {
			e.printStackTrace();
		}
		freeMemory *= 1024;
		 */
		
		try {
			long maxMemory = 1;
			
			// Calculate the total amount of RAM in Kilobytes
			Scanner input = new Scanner(new File("/proc/meminfo"));
			while(input.hasNextLine()) {
				String line = input.nextLine();
				String[] params = line.split(" +");
				if(line.contains("MemFree")) {
					maxMemory = Long.parseLong(params[1]);
					break;
				}
			}
			input.close();
			
			// Calculate the maximum amount of RAM in Bytes
			maxMemory *= 1024;
			// Only allocate a percentage of that.
			maxMemory *= percent;
			
			System.out.println("Memory to allocate: " + maxMemory);
			
			// Allocate our calculated amount of memory in 1MB blocks, or until we run out of memory.
			long memoryAllocated = 0;
			int allocate = 1024*1024;	// Amount of memory to allocate per loop iteration
			Vector<byte[]> v = new Vector<byte[]>();
			try {
				while(memoryAllocated < maxMemory) {
					v.add(new byte[(int)allocate]);
					memoryAllocated += allocate;
				}
			} catch(OutOfMemoryError e) {
				e.printStackTrace();
			}

			System.out.println("Allocated " + (memoryAllocated/1024/1024) + " MB");

			// Keep the memory we've allocated alive for the duration of the run
			System.out.println("Keeping allocated memory alive...");
			int cur = 0;
			while(!stop) {
				v.get(cur++)[0] = (byte) (Math.random() * Byte.MAX_VALUE);
				cur %= v.size();
			}
			System.out.println("Deallocating Memory...");
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
	}
}
